(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{527:function(t,r,e){t.exports=e.p+"assets/img/android_fluency_quality_manage.ba944efd.png"},528:function(t,r,e){t.exports=e.p+"assets/img/img_01.041b0d96.png"},529:function(t,r,e){t.exports=e.p+"assets/img/img_02.2143c12f.png"},530:function(t,r,e){t.exports=e.p+"assets/img/img_03.b9daa100.png"},531:function(t,r,e){t.exports=e.p+"assets/img/img_04.c81ad105.png"},532:function(t,r,e){t.exports=e.p+"assets/img/img_05.e635541e.png"},533:function(t,r,e){t.exports=e.p+"assets/img/img_06.9eb048b4.png"},534:function(t,r,e){t.exports=e.p+"assets/img/img_07.48d81993.png"},535:function(t,r,e){t.exports=e.p+"assets/img/img_08.c49c6668.png"},536:function(t,r,e){t.exports=e.p+"assets/img/img_09.837b4a40.png"},537:function(t,r,e){t.exports=e.p+"assets/img/img_10.2d398a40.png"},538:function(t,r,e){t.exports=e.p+"assets/img/img_11.c9a455f5.png"},539:function(t,r,e){t.exports=e.p+"assets/img/img_12.49bafe2e.png"},540:function(t,r,e){t.exports=e.p+"assets/img/img_13.60fe34e3.png"},541:function(t,r,e){t.exports=e.p+"assets/img/img_14.7a6a39e5.png"},542:function(t,r,e){t.exports=e.p+"assets/img/img_15.2ee80149.png"},543:function(t,r,e){t.exports=e.p+"assets/img/img_16.21ead20c.png"},544:function(t,r,e){t.exports=e.p+"assets/img/img_17.8ececa9a.png"},890:function(t,r,e){"use strict";e.r(r);var a=e(23),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"android流畅度评估及卡顿优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android流畅度评估及卡顿优化"}},[t._v("#")]),t._v(" Android流畅度评估及卡顿优化")]),t._v(" "),a("p",[a("img",{attrs:{src:e(527),alt:"img_1.png"}})]),t._v(" "),a("h2",{attrs:{id:"_1、渲染和流畅概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、渲染和流畅概念"}},[t._v("#")]),t._v(" 1、渲染和流畅概念")]),t._v(" "),a("p",[t._v("Google定义：界面呈现是指从应用生成帧并将其显示在屏幕上的动作。要确保用户能够流畅地与应用互动，应用呈现每帧的时间不应超过16ms，以达到每秒60帧的呈现速度（为什么是60fps？）。\n如果应用存在界面呈现缓慢的问题，系统会不得不跳过一些帧，这会导致用户感觉应用不流畅，我们将这种情况称为卡顿。")]),t._v(" "),a("h3",{attrs:{id:"_1-为什么是60fps或16ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么是60fps或16ms"}},[t._v("#")]),t._v(" （1）为什么是60fps或16ms？")]),t._v(" "),a("p",[t._v("来源于："),a("a",{attrs:{href:"https://www.youtube.com/watch?v=CaMTIgxCSqU",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Android的为什么是60fps？"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("16ms意味着1000/60hz，相当于60fps。这是因为人眼与大脑之间的协作无法感知超过60fps的画面更新。12fps大概类似手动快速翻动书籍的帧率， 这明显是可以感知到不够顺滑的。24fps使得人眼感知的是连续线性的运动，这其实是归功于运动模糊的效果。 24fps是电影胶圈通常使用的帧率，因为这个帧率已经足够支撑大部分电影画面需要表达的内容，同时能够最大的减少费用支出。 但是低于30fps是 无法顺畅表现绚丽的画面内容的，此时就需要用到60fps来达到想要的效果，超过60fps就没有必要了。如果我们的应用没有在16ms内完成屏幕刷新的全部逻辑操作，就会发生卡顿。")]),t._v(" "),a("h3",{attrs:{id:"_2-关于渲染原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-关于渲染原理"}},[t._v("#")]),t._v(" （2）关于渲染原理")]),t._v(" "),a("p",[t._v("首先要了解Android显示1帧图像，所经历的完整过程。\n"),a("img",{attrs:{src:e(528),alt:"Android渲染机制"}})]),t._v(" "),a("p",[t._v("如图所示，屏幕显示1帧图像需要经历5个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("定义布局中的组件")]),t._v(" "),a("li",[t._v("将ImageView组件映射成UI对象，加载到内存中")]),t._v(" "),a("li",[t._v("CPU将UI对象经过运算处理成多维矢量图形")]),t._v(" "),a("li",[t._v("GPU栅格化处理")]),t._v(" "),a("li",[t._v("显示器显示图像")])]),t._v(" "),a("p",[a("strong",[t._v("常见的丢帧情况：")]),t._v(" 渲染期间可能出现的情况，渲染大于16ms和小于16ms的情况：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(529),alt:"丢帧示例"}})]),t._v(" "),a("p",[a("strong",[t._v("上图中应该绘制 4 帧数据 , 但是实际上只绘制了 3 帧 , 实际帧率少了一帧")])]),t._v(" "),a("h2",{attrs:{id:"_2、卡顿的标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、卡顿的标准"}},[t._v("#")]),t._v(" 2、卡顿的标准")]),t._v(" "),a("p",[t._v("判断APP是否出现卡顿，我们从通用应用和游戏两个纬度的代表公司标准来看，即Google的Android vitals性能指标和地球第一游戏大厂腾讯的PrefDog性能指标。")]),t._v(" "),a("h3",{attrs:{id:"_1-通用应用界面卡顿标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-通用应用界面卡顿标准"}},[t._v("#")]),t._v(" （1）通用应用界面卡顿标准")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://support.google.com/googleplay/android-developer/answer/9844486",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用Android Vitals监控应用的技术性能"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("以Google Vitals的卡顿描述为准，即呈现速度缓慢和帧冻结两个维度判断：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("呈现速度缓慢")]),t._v("：在呈现速度缓慢的帧数较多的页面，当超过50%的帧呈现时间超过16ms毫秒时，用户感官明显卡顿。")]),t._v(" "),a("li",[a("strong",[t._v("帧冻结")]),t._v("：帧冻结的绘制耗时超过700ms，为严重卡顿问题。")]),t._v(" "),a("li",[a("strong",[t._v("卡顿忽略FPS<=2的页面")]),t._v("：因为人的视觉暂留100~400ms，即FPS在2.5~10之间时，所以当FPS低于3时，人眼看到的并不是连续动作，即使有丢帧现象，也不会察觉。")])]),t._v(" "),a("h3",{attrs:{id:"_2-游戏应用界面卡顿标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-游戏应用界面卡顿标准"}},[t._v("#")]),t._v(" （2）游戏应用界面卡顿标准")]),t._v(" "),a("blockquote",[a("p",[t._v("来源："),a("a",{attrs:{href:"https://bbs.perfdog.qq.com/article-detail.html?id=5",target:"_blank",rel:"noopener noreferrer"}},[t._v("腾讯PerfDog使用说明书"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("PerfDog Jank计算方法：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("普通卡顿Jank(同时满足两条件)：")]),t._v(" "),a("ul",[a("li",[t._v("当前帧耗时>前三帧平均耗时2倍。")]),t._v(" "),a("li",[t._v("当前帧耗时>两帧电影帧耗时(1000ms/24*2=84ms)。")])])]),t._v(" "),a("li",[a("strong",[t._v("严重卡顿BigJank(同时满足两条件)：")]),t._v(" "),a("ul",[a("li",[t._v("当前帧耗时>前三帧平均耗时2倍。")]),t._v(" "),a("li",[t._v("当前帧耗时>三帧电影帧耗时(1000ms/24*3=125ms)。")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-为什么fps无法判断是否卡顿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么fps无法判断是否卡顿"}},[t._v("#")]),t._v(" （3）为什么FPS无法判断是否卡顿？")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://bbs.perfdog.qq.com/article-detail.html?id=6",target:"_blank",rel:"noopener noreferrer"}},[t._v("APP&游戏需要关注Jank卡顿及卡顿率吗？"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("帧率FPS高并不能反映流畅或不卡顿。比如：FPS为50帧，前200ms渲染一帧，后800ms渲染49帧，虽然帧率50，但依然觉得非常卡顿。同时帧率FPS低，并不代表卡顿，比如无卡顿时均匀FPS为15帧。所以平均帧率FPS与卡顿无任何直接关系)")]),t._v(" "),a("h2",{attrs:{id:"_3、卡顿评估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、卡顿评估"}},[t._v("#")]),t._v(" 3、卡顿评估")]),t._v(" "),a("p",[t._v("当了解卡顿的标准以及渲染原理之后，可以得出结论，只有丢帧情况才能准确判断是否卡顿。")]),t._v(" "),a("h3",{attrs:{id:"_1-如何获取丢帧信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何获取丢帧信息"}},[t._v("#")]),t._v(" （1）如何获取丢帧信息？")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://developer.android.com/training/testing/performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Android开发者 | 测试界面性能"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.android.com/studio/command-line/dumpsys",target:"_blank",rel:"noopener noreferrer"}},[t._v("dumpsys"),a("OutboundLink")],1),t._v(" 是一种在设备上运行并转储需要关注的系统服务状态信息的 Android 工具。通过向 dumpsys 传递 gfxinfo 命令，可以提供 logcat 格式的输出，其中包含与录制阶段发生的动画帧相关的性能信息。")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看帧时间数据")]),t._v("\nadb shell dumpsys gfxinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" PACKAGE_NAME "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" framestats\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 帧数据重置")]),t._v("\nadb shell dumpsys gfxinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" PACKAGE_NAME "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" reset\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"聚合帧统计信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合帧统计信息"}},[t._v("#")]),t._v(" 聚合帧统计信息")]),t._v(" "),a("p",[t._v("借助 Android 6.0（API 级别 23），该命令可将在整个进程生命周期中收集的帧数据的聚合分析输出到 logcat。例如：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v(" Stats since: 752958278148ns     \n Total frames rendered: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("82189")]),t._v("     \n Janky frames: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35335")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42.99")]),t._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n 90th percentile: 34ms     \n 95th percentile: 42ms     \n 99th percentile: 69ms     \n Number Missed Vsync: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4706")]),t._v("     \n Number High input latency: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("142")]),t._v("     \n Number Slow UI thread: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17270")]),t._v("     \n Number Slow bitmap uploads: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1542")]),t._v("     \n Number Slow draw: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23342")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("这些总体统计信息可以得到期间的FPS、Jank比例、各类渲染异常数量统计。")]),t._v(" "),a("h4",{attrs:{id:"精确的帧时间信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精确的帧时间信息"}},[t._v("#")]),t._v(" 精确的帧时间信息")]),t._v(" "),a("p",[t._v("命令"),a("code",[t._v("adb shell dumpsys gfxinfo <PACKAGE_NAME> framestats")]),t._v("可提供最近120个帧中，渲染各阶段带有纳秒时间戳的帧时间信息。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("flags")]),t._v(" "),a("th",[t._v("intended_vsync")]),t._v(" "),a("th",[t._v("vsync")]),t._v(" "),a("th",[t._v("oldest_input_event")]),t._v(" "),a("th",[t._v("newest_input_event")]),t._v(" "),a("th",[t._v("handle_input_start")]),t._v(" "),a("th",[t._v("animation_start")]),t._v(" "),a("th",[t._v("perform_traversals_start")]),t._v(" "),a("th",[t._v("draw_start")]),t._v(" "),a("th",[t._v("sync_queued")]),t._v(" "),a("th",[t._v("sync_start")]),t._v(" "),a("th",[t._v("issue_draw_commands_start")]),t._v(" "),a("th",[t._v("swap_buffers")]),t._v(" "),a("th",[t._v("frame_completed")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("27965466202353")]),t._v(" "),a("td",[t._v("27965466202353")]),t._v(" "),a("td",[t._v("27965449758000")]),t._v(" "),a("td",[t._v("27965461202353")]),t._v(" "),a("td",[t._v("27965467153286")]),t._v(" "),a("td",[t._v("27965471442505")]),t._v(" "),a("td",[t._v("27965471925682")]),t._v(" "),a("td",[t._v("27965474025318")]),t._v(" "),a("td",[t._v("27965474588547")]),t._v(" "),a("td",[t._v("27965474860786")]),t._v(" "),a("td",[t._v("27965475078599")]),t._v(" "),a("td",[t._v("27965479796151")]),t._v(" "),a("td",[t._v("27965480589068")])])])]),t._v(" "),a("p",[a("strong",[t._v("关键参数说明：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("flags")]),t._v("："),a("font",{attrs:{color:"red"}},[t._v("FLAGS为0时，总帧时间(ms) = (FRAME_COMPLETED - INTENDED_VSYNC) / 1000000。")]),t._v(" 如果非零，则该行应该被忽略，因为该帧的预期布局和绘制时间超过16ms，为异常帧。")],1),t._v(" "),a("li",[a("strong",[t._v("INTENDED_VSYNC")]),t._v("：帧的的预期起点，"),a("font",{attrs:{color:"red"}},[t._v("监测UI线程是否正常")]),t._v("。如果与VSYNC值不同，是由于UI线程中的工作使其无法及时响应垂直同步信号所造成的。")],1),t._v(" "),a("li",[a("strong",[t._v("HANDLE_INPUT_START")]),t._v("：\n"),a("ul",[a("li",[t._v("将输入事件分派给应用的时间戳。")]),t._v(" "),a("li",[t._v("通过观察此时间戳与 ANIMATION_START 之间的时间差，可以测量应用处理输入事件所花的时间。")]),t._v(" "),a("li",[t._v("如果这个数字较高（> 2 毫秒），则表明应用处理 View.onTouchEvent() "),a("font",{attrs:{color:"red"}},[t._v("等输入事件所花的时间太长，这意味着此工作需要进行优化或转交给其他线程")]),t._v("。请注意，有些情况下（例如，启动新 Activity 或类似活动的点击事件），这个数字较大是预料之中并且可以接受的。")],1)])]),t._v(" "),a("li",[a("strong",[t._v("ANIMATION_START")]),t._v("：\n"),a("ul",[a("li",[t._v("在 Choreographer 中注册的动画运行的时间戳。")]),t._v(" "),a("li",[t._v("通过观察此时间戳与 PERFORM_TRANVERSALS_START 之间的时间差，可以确定评估正在运行的所有动画（常见动画有 ObjectAnimator、ViewPropertyAnimator 和 Transitions）所用的时间。")]),t._v(" "),a("li",[a("font",{attrs:{color:"red"}},[t._v("如果这个数字较高（> 2 毫秒），请检查您的应用是否编写了任何自定义动画，或检查 ObjectAnimator 在对哪些字段设置动画并确保它们适用于动画。")])],1)])]),t._v(" "),a("li",[a("strong",[t._v("PERFORM_TRAVERSALS_START")]),t._v("：布局和度量阶段完成的时间 = PerformTraversalsStart - DrawStart。"),a("font",{attrs:{color:"red"}},[t._v("滚动或动画期间，期望接近0。")])],1),t._v(" "),a("li",[a("strong",[t._v("SYNC_QUEUED")]),t._v("：\n"),a("ul",[a("li",[t._v("将同步请求发送给 RenderThread 的时间。")]),t._v(" "),a("li",[t._v("它标记的是将开始同步阶段的消息发送给 RenderThread 的时间点。"),a("font",{attrs:{color:"red"}},[t._v("如果该时间点与 SYNC_START 的时间差较大（约 > 0.1 毫秒），则意味着 RenderThread 正忙于处理另一帧。它在内部用于区分该帧是因作业负荷过大而超过了 16 毫秒的预算时间，还是该帧由于上一帧超过 16 毫秒的预算时间而停止。")])],1)])]),t._v(" "),a("li",[a("strong",[t._v("SYNC_START")]),t._v("：\n"),a("ul",[a("li",[t._v("绘制同步阶段的开始时间。")]),t._v(" "),a("li",[t._v("如果此时间与 ISSUE_DRAW_COMMANDS_START 之间"),a("font",{attrs:{color:"red"}},[t._v("相差较大（约 > 0.4 毫秒），通常表示绘制了大量必须上传到 GPU 的新位图。")])],1)])]),t._v(" "),a("li",[a("strong",[t._v("ISSUE_DRAW_COMMANDS_START")]),t._v("：\n"),a("ul",[a("li",[t._v("硬件渲染器开始向 GPU 发出绘图命令的时间。")]),t._v(" "),a("li",[t._v("此时间与 FRAME_COMPLETED 之间的时间差让您可以大致了解应用生成的 GPU 工作量。"),a("font",{attrs:{color:"red"}},[t._v("绘制过度或渲染效果不佳等问题都会在此显示出来。")])],1)])]),t._v(" "),a("li",[a("strong",[t._v("FrameCompleted")]),t._v("：帧的完整时间。帧耗时 = FrameCompleted - IntendedVsync，"),a("font",{attrs:{color:"red"}},[t._v("要求小于16ms。")])],1)]),t._v(" "),a("h3",{attrs:{id:"_2-如何判断是否卡顿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何判断是否卡顿"}},[t._v("#")]),t._v(" （2）如何判断是否卡顿？")]),t._v(" "),a("h4",{attrs:{id:"通用应用卡顿评估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用应用卡顿评估"}},[t._v("#")]),t._v(" 通用应用卡顿评估")]),t._v(" "),a("p",[t._v("通过gfxinfo输出的帧信息，通过定时reset和打印帧信息，可以得到FPS(帧数/打印间隔时间)、丢帧比例（(janky_frames / total_frames_rendered)*100 %）、是否有帧冻结(帧耗时>700ms)。\n根据第2部分的通用应用卡顿标准，可以通过丢帧比例和帧冻结数量，准确判断当前场景是否卡顿。并且通过定时截图，还可以根据截图定位卡顿的具体场景。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(530),alt:"流畅度报告截图"}})]),t._v(" "),a("p",[t._v("如上图所示，利用gfxinfo开发的检查卡顿的小工具，图中参数和卡顿说明如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("FPS = total_frames_renderes")]),t._v("：total_frames_renderes为每秒的帧数量，即FPS。（每秒reset并统计一次）")]),t._v(" "),a("li",[a("strong",[t._v("卡顿为什么去掉FPS<2的数据")]),t._v("：人的视觉暂留100~400ms，即FPS在2.5~10之间时，所以当FPS低于3时，人眼看到的并不是连续动作，即使有丢帧现象，也不会察觉。")]),t._v(" "),a("li",[a("strong",[t._v("UI_score")]),t._v("：UI_score = 100 - (janky_frames / total_frames_rendered)*100，根据Google Vitals呈现速度缓慢的定义，当超过50%的帧呈现时间超过16毫秒，说明呈现速度缓慢。所以，当UI_score<=50时，页面卡顿。")]),t._v(" "),a("li",[a("strong",[t._v("帧冻结")]),t._v("：通过每秒的max_frame_time判断，当帧冻结的绘制耗时超过700ms，为严重卡顿问题。")])]),t._v(" "),a("h4",{attrs:{id:"游戏应用卡顿评估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#游戏应用卡顿评估"}},[t._v("#")]),t._v(" 游戏应用卡顿评估")]),t._v(" "),a("p",[t._v("根据上面对gfxinfo的帧信息解析，可以准确计算出每一帧的耗时。从而可以开发出满足腾讯PerfDog中关于普通卡顿和严重卡顿的判断。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(531),alt:"游戏卡顿定义"}})]),t._v(" "),a("p",[t._v("依赖定时截图，即可准确定位卡顿场景。如下图所示（此处以PerfDog截图示例）：\n"),a("img",{attrs:{src:e(532),alt:"PerfDog截图"}})]),t._v(" "),a("h2",{attrs:{id:"_4、卡顿定位工具和高效定位方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、卡顿定位工具和高效定位方法"}},[t._v("#")]),t._v(" 4、卡顿定位工具和高效定位方法")]),t._v(" "),a("p",[t._v("通过第3部分的卡顿评估方法，我们可以定位到卡顿场景，但是如何定位到具体卡顿原因呢。")]),t._v(" "),a("p",[t._v("首先了解卡顿问题定位工具，然后再了解常见的卡顿原因，即可通过复现卡顿场景的同时，用工具去定位具体卡顿问题。")]),t._v(" "),a("h3",{attrs:{id:"_1-卡顿问题定位工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-卡顿问题定位工具"}},[t._v("#")]),t._v(" （1）卡顿问题定位工具")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://developer.android.com/training/testing/performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("dumpsys gfxinfo"),a("OutboundLink")],1),t._v(" ：记录动画帧相关性能信息\n"),a("img",{attrs:{src:e(533),alt:"gfxinfo帧信息"}})])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.android.com/topic/performance/tracing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Systrace或Perfetto"),a("OutboundLink")],1),t._v(" ：记录短时间内的设备活动，汇总了 Android 内核中的数据，例如 CPU 调度程序、磁盘活动和应用线程。")]),t._v(" "),a("ul",[a("li",[t._v("Perfetto是Android 10 中引入的全新平台级跟踪工具\n"),a("img",{attrs:{src:e(534),alt:"systrace报告"}})])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.android.com/studio/debug/layout-inspector?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("LayoutInspect"),a("OutboundLink")],1),t._v(" ：检测动态布局层次结构、调查资源属性值在源代码中的来源位置、在运行时对应用的视图层次结构进行高级 3D 可视化。\n"),a("img",{attrs:{src:e(535),alt:"LayoutInspect报告"}})])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BlockCanary"),a("OutboundLink")],1),t._v(" ：检测主线程上的各种卡顿问题\n"),a("img",{attrs:{src:e(536),alt:"BlockCanary输出的卡顿信息"}})])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.android.com/studio/profile/cpu-profiler?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU性能剖析器"),a("OutboundLink")],1),t._v(" ：监控应用进程中的每个线程，执行的方法 (Java) 或函数 (C/C++)，以及每个方法或函数在其执行期间消耗的 CPU 资源。还可以使用方法和函数跟踪数据来识别调用方和被调用方。可以使用这些信息来确定哪些方法或函数过于频繁地调用通常会消耗大量资源的特定任务，并优化应用的代码以避免不必要的工作。\n"),a("img",{attrs:{src:e(537),alt:"CPU记录的线程信息"}})])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.android.com/topic/performance/rendering/inspect-gpu-rendering?hl=zh-cn#profile_rendering",target:"_blank",rel:"noopener noreferrer"}},[t._v("GPU 渲染模式分析工具"),a("OutboundLink")],1),t._v(" ：以滚动直方图的形式直观地显示渲染界面窗口帧所花费的时间（以每帧 16 毫秒的速度作为对比基准），可定位动画渲染阶段的具体问题（比如：输入处理耗时问题、界面线程问题、视图绘制问题等）。\n"),a("img",{attrs:{src:e(538),alt:"GPU渲染报告"}})])])]),t._v(" "),a("h3",{attrs:{id:"_2-如何高效定位卡顿问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何高效定位卡顿问题"}},[t._v("#")]),t._v(" （2）如何高效定位卡顿问题")]),t._v(" "),a("p",[t._v("重点就是，充分利用gfxinfo输出的帧信息，对卡顿问题进行分类。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("INTENDED_VSYNC")]),t._v(" "),a("ul",[a("li",[t._v("线程问题：如果此值不同于 VSYNC，则表示界面线程中发生的工作使其无法及时响应 Vsync 信号。")]),t._v(" "),a("li",[t._v("推荐定位工具：CPU性能剖析器查看线程中耗时较多的方法或函数。")])])]),t._v(" "),a("li",[a("strong",[t._v("HANDLE_INPUT_START")]),t._v(" "),a("ul",[a("li",[t._v("输出时间处理时间长：该值与ANIMATION_START差值>2ms，则表明应用处理 View.onTouchEvent() 等输入事件所花的时间太长，这意味着此工作需要进行优化或转交给其他线程。")]),t._v(" "),a("li",[t._v("注意事项：有些情况下（例如，启动新 Activity 或类似活动的点击事件），这个数字较大是预料之中并且可以接受的。")]),t._v(" "),a("li",[t._v("推荐定位工具：CPU性能剖析器查看线程中View.onTouchEvent()，并优化代码或转交给其他线程处理。")])])]),t._v(" "),a("li",[a("strong",[t._v("ANIMATION_START")]),t._v(" "),a("ul",[a("li",[t._v("动画问题：该值与PERFORM_TRANVERSALS_START差值>2ms，自定义动画问题 或 不适合的字段设置动画问题。")]),t._v(" "),a("li",[t._v("推荐定位工具：GPU 渲染模式分析工具，可定位输入处理耗时问题、界面线程问题、视图绘制问题等具体的问题范畴。")])])]),t._v(" "),a("li",[a("strong",[t._v("PERFORM_TRAVERSALS_START")]),t._v(" "),a("ul",[a("li",[t._v("布局问题：该值与DRAW_START如果>0，表明完成布局和测量阶段耗时较多。")]),t._v(" "),a("li",[t._v("推荐定位工具：使用GPU渲染分析工具确认是否Draw或Measure/Layout耗时较多，Draw较多说明更新的视图太多或View的OnDraw方法做了耗时操作； Measure/Layout耗时较多，说明布局可能有严重性能问题，使用LayoutInspect检查布局是否过于复杂，减少嵌套层次和控件个数。")])])]),t._v(" "),a("li",[a("strong",[t._v("SYNC_QUEUED")]),t._v(" "),a("ul",[a("li",[t._v("帧作业负荷较大问题：该值与 SYNC_START 的时间差较大（约 > 0.1 毫秒），则意味着 RenderThread 正忙于处理另一帧。它在内部用于区分该帧是因作业负荷过大而超过了 16 毫秒的预算时间，还是该帧由于上一帧超过 16 毫秒的预算时间而停止。")]),t._v(" "),a("li",[t._v("推荐定位工具：如果是因为当前帧作业负荷较大导致耗时较多，观察其他参数具体定位问题。")])])]),t._v(" "),a("li",[a("strong",[t._v("SYNC_START")]),t._v(" "),a("ul",[a("li",[t._v("需要上传到GPU的新位图较多：如果此时间与 ISSUE_DRAW_COMMANDS_START 之间相差较大（约 > 0.4 毫秒），通常表示绘制了大量必须上传到 GPU 的新位图。")]),t._v(" "),a("li",[t._v("推荐定位工具：GPU渲染分析工具，具体定位渲染阶段问题。")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-主要卡顿原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-主要卡顿原因"}},[t._v("#")]),t._v(" （3）主要卡顿原因")]),t._v(" "),a("blockquote",[a("p",[t._v("主要参考："),a("a",{attrs:{href:"https://blog.csdn.net/u013309870/article/details/106801022",target:"_blank",rel:"noopener noreferrer"}},[t._v("Android卡顿检测及优化"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("了解了高效定位卡顿的方法和卡顿问题定位工具，再熟悉一下常见的卡顿原因，可以更熟练的定位和优化卡顿。")]),t._v(" "),a("h4",{attrs:{id:"a-系统层面卡顿原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-系统层面卡顿原因"}},[t._v("#")]),t._v(" A. 系统层面卡顿原因")]),t._v(" "),a("h5",{attrs:{id:"surfaceflinger-主线程耗时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#surfaceflinger-主线程耗时"}},[t._v("#")]),t._v(" SurfaceFlinger 主线程耗时")]),t._v(" "),a("p",[t._v("SurfaceFlinger 负责 Surface 的合成，一旦 SurfaceFlinger 主线程调用超时，就会产生掉帧。\nSurfaceFlinger 主线程耗时会也会导致 hwc service 和 crtc 不能及时完成，也会阻塞应用的 binder 调用，如 dequeueBuffer、queueBuffer 等。")]),t._v(" "),a("h5",{attrs:{id:"后台活动进程太多导致系统繁忙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后台活动进程太多导致系统繁忙"}},[t._v("#")]),t._v(" 后台活动进程太多导致系统繁忙")]),t._v(" "),a("p",[t._v("后台进程活动太多，会导致系统非常繁忙，cpu \\ io \\ memory 等资源都会被占用，这时候很容易出现卡顿问题，这也是系统这边经常会碰到的问题。\ndumpsys cpuinfo 可以查看一段时间内 cpu 的使用情况：\n"),a("img",{attrs:{src:e(539),alt:""}})]),t._v(" "),a("h5",{attrs:{id:"主线程调度不到-处于-runnable-状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主线程调度不到-处于-runnable-状态"}},[t._v("#")]),t._v(" 主线程调度不到 , 处于 Runnable 状态")]),t._v(" "),a("p",[t._v("当线程为 Runnable 状态的时候，调度器如果迟迟不能对齐进行调度，那么就会产生长时间的 Runnable 线程状态，导致错过 Vsync 而产生流畅性问题。")]),t._v(" "),a("h5",{attrs:{id:"system-锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-锁"}},[t._v("#")]),t._v(" System 锁")]),t._v(" "),a("p",[t._v("system_server 的 AMS 锁和 WMS 锁 , 在系统异常的情况下 , 会变得非常严重 , 如下图所示 , 许多系统的关键任务都被阻塞 , 等待锁的释放 , 这时候如果有 App 发来的 Binder 请求带锁 , 那么也会进入等待状态 , 这时候 App 就会产生性能问题 ; 如果此时做 Window 动画 , 那么 system_server 的这些锁也会导致窗口动画卡顿。\n"),a("img",{attrs:{src:e(540),alt:""}})]),t._v(" "),a("h5",{attrs:{id:"layer过多导致-surfaceflinger-layer-compute-耗时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#layer过多导致-surfaceflinger-layer-compute-耗时"}},[t._v("#")]),t._v(" Layer过多导致 SurfaceFlinger Layer Compute 耗时")]),t._v(" "),a("p",[t._v("Android P 修改了 Layer 的计算方法 , 把这部分放到了 SurfaceFlinger 主线程去执行, 如果后台 Layer 过多，就会导致 SurfaceFlinger 在执行 rebuildLayerStacks 的时候耗时 , 导致 SurfaceFlinger 主线程执行时间过长。\n"),a("img",{attrs:{src:e(541),alt:""}})]),t._v(" "),a("h4",{attrs:{id:"b-应用层面卡顿原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-应用层面卡顿原因"}},[t._v("#")]),t._v(" B. 应用层面卡顿原因")]),t._v(" "),a("h5",{attrs:{id:"主线程执行时间长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主线程执行时间长"}},[t._v("#")]),t._v(" 主线程执行时间长")]),t._v(" "),a("p",[t._v("主线程执行 Input \\ Animation \\ Measure \\ Layout \\ Draw \\ decodeBitmap 等操作超时都会导致卡顿 。")]),t._v(" "),a("ul",[a("li",[t._v("Measure \\ Layout 耗时\\超时")]),t._v(" "),a("li",[t._v("draw耗时")]),t._v(" "),a("li",[t._v("Animation回调耗时")]),t._v(" "),a("li",[t._v("View 初始化耗时")]),t._v(" "),a("li",[t._v("List Item 初始化耗时")]),t._v(" "),a("li",[t._v("主线程操作数据库")])]),t._v(" "),a("h5",{attrs:{id:"主线程-binder-耗时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主线程-binder-耗时"}},[t._v("#")]),t._v(" 主线程 Binder 耗时")]),t._v(" "),a("p",[t._v("Activity resume 的时候, 与 AMS 通信要持有 AMS 锁, 这时候如果碰到后台比较繁忙的时候, 等锁操作就会比较耗时, 导致部分场景因为这个卡顿, 比如多任务手势操作。\n"),a("img",{attrs:{src:e(542),alt:""}})]),t._v(" "),a("h5",{attrs:{id:"webview-性能不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webview-性能不足"}},[t._v("#")]),t._v(" WebView 性能不足")]),t._v(" "),a("p",[t._v("应用里面涉及到 WebView 的时候, 如果页面比较复杂, WebView 的性能就会比较差, 从而造成卡顿。\n"),a("img",{attrs:{src:e(543),alt:""}})]),t._v(" "),a("h5",{attrs:{id:"帧率与刷新率不匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#帧率与刷新率不匹配"}},[t._v("#")]),t._v(" 帧率与刷新率不匹配")]),t._v(" "),a("p",[t._v("如果屏幕帧率和系统的 fps 不相符 , 那么有可能会导致画面不是那么顺畅. 比如使用 90 Hz 的屏幕搭配 60 fps 的动画。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(544),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_5、卡顿优化建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、卡顿优化建议"}},[t._v("#")]),t._v(" 5、卡顿优化建议")]),t._v(" "),a("p",[t._v("由上面的分析可知对象分配、垃圾回收(GC)、线程调度以及Binder调用 是Android系统中常见的卡顿原因，因此卡顿优化主要以下几种方法，更多的要结合具体的应用来进行：")]),t._v(" "),a("h3",{attrs:{id:"_1-布局优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-布局优化"}},[t._v("#")]),t._v(" （1）布局优化")]),t._v(" "),a("ul",[a("li",[t._v("通过减少冗余或者嵌套布局来降低视图层次结构。比如使用约束布局代替线性布局和相对布局。")]),t._v(" "),a("li",[t._v("用 ViewStub 替代在启动过程中不需要显示的 UI 控件。")]),t._v(" "),a("li",[t._v("使用自定义 View 替代复杂的 View 叠加。")]),t._v(" "),a("li",[t._v("减少嵌套层次和控件个数。")]),t._v(" "),a("li",[t._v("使用Tags：Merge标签减少布局嵌套层次，ViewStub标签推迟创建对象、延迟初始化、节省内存等。")]),t._v(" "),a("li",[t._v("减少过度绘制")])]),t._v(" "),a("h3",{attrs:{id:"_2-减少主线程耗时操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-减少主线程耗时操作"}},[t._v("#")]),t._v(" （2）减少主线程耗时操作")]),t._v(" "),a("ul",[a("li",[t._v("主线程中不要直接操作数据库，数据库的操作应该放在数据库线程中完成。")]),t._v(" "),a("li",[t._v("sharepreference尽量使用apply，少使用commit，可以使用MMKV框架来代替sharepreference。")]),t._v(" "),a("li",[t._v("网络请求回来的数据解析尽量放在子线程中，不要在主线程中进行复制的数据解析操作。")]),t._v(" "),a("li",[t._v("不要在activity的onResume和onCreate中进行耗时操作，比如大量的计算等。")])]),t._v(" "),a("h3",{attrs:{id:"_3-列表优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-列表优化"}},[t._v("#")]),t._v(" （3）列表优化")]),t._v(" "),a("ul",[a("li",[t._v("RecyclerView使用优化，使用DiffUtil和notifyItemDataSetChanged进行局部更新等。")])]),t._v(" "),a("h3",{attrs:{id:"_4-内存优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存优化"}},[t._v("#")]),t._v(" （4）内存优化")]),t._v(" "),a("ul",[a("li",[t._v("减少小对象的频繁分配和回收操作。")]),t._v(" "),a("li",[t._v("被频繁调用的紧密的循环里，避免对象分配来降低GC的压力。")])]),t._v(" "),a("h2",{attrs:{id:"_6、名词解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、名词解释"}},[t._v("#")]),t._v(" 6、名词解释")]),t._v(" "),a("h3",{attrs:{id:"_1-帧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-帧"}},[t._v("#")]),t._v(" （1）帧")]),t._v(" "),a("p",[t._v("在计算机和通信领域，帧是一个包括“帧同步串行”的数字数据传输单元或数字数据包。\n在视频领域，电影、电视、数字视频等可视为随时间连续变换的许多张画面，其中帧是指每一张画面。")])])}),[],!1,null,null,null);r.default=s.exports}}]);